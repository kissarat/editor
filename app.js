// Generated by CoffeeScript 1.6.3
var async, byId, content, errorDiv, fs, getSelectedCell, getSelectedColumnIndex, main, report, table_tools;

byId = document.getElementById.bind(document);

errorDiv = null;

content = null;

fs = null;

addEventListener('load', function() {
  errorDiv = byId('error');
  content = byId('content');
  return chrome.storage.sync.get(['FileSystemSize', 'Noob'], main);
});

report = function(message) {
  if (message instanceof Event) {
    message = message.message;
  }
  errorDiv.innerHTML = message;
  return errorDiv.classList.add('visible');
};

async = function() {
  var args;
  args = arguments.slice(1);
  args.push(report);
  return this[arguments[0]].apply(this, args);
};

main = function(config) {
  return async('webkitRequestFileSystem', PERSISTENT, config.FileSystemSize, function(fileSystem) {
    return fs = fileSystem;
  });
};

getSelectedCell = function() {
  var cell, cells, _i, _len;
  cells = document.querySelectorAll('#construct td');
  for (_i = 0, _len = cells.length; _i < _len; _i++) {
    cell = cells[_i];
    if ('#BBBBBB' === cell.style.background) {
      return cell;
    }
  }
};

getSelectedColumnIndex = function() {
  var cell, curCell, i, row, _i, _len, _ref;
  cell = getSelectedCell();
  i = 0;
  row = cell.parentNode;
  _ref = row.cells;
  for (_i = 0, _len = _ref.length; _i < _len; _i++) {
    curCell = _ref[_i];
    if (curCell === cell) {
      break;
    }
    i++;
  }
  return i;
};

table_tools = {
  insertRow: {
    hint: 'Вставити рядок',
    onclick: function() {
      var cell, newRow, row, _i, _len, _ref;
      newRow = document.createElement('tr');
      row = getSelectedCell().parentNode;
      _ref = row.cells;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        cell = _ref[_i];
        newRow.appendChild(cell.clone(false));
      }
      return this.tBodies[0].insertBefore(newRow);
    }
  },
  insertColumn: {
    hint: 'Вставити стовбець',
    onclick: function() {
      var cell, i, newCell, row, _i, _len, _ref, _results;
      i = getSelectedColumnIndex();
      _ref = this.rows;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        row = _ref[_i];
        cell = row.cells.item(i);
        newCell = document.createElement('td');
        _results.push(row.insertBefore(newCell, cell));
      }
      return _results;
    }
  },
  removeRow: {
    hint: 'Видалити рядок',
    onclick: function() {
      return this.tBodies[0].removeChild((getSelectedCell()).parentNode);
    }
  },
  removeColumn: {
    hint: 'Видалити стовбець',
    onclick: function() {
      var cell, i, row, _i, _len, _ref, _results;
      i = getSelectedColumnIndex();
      _ref = this.rows;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        row = _ref[_i];
        cell = row.cells.item(i);
        _results.push(row.removeChild(cell));
      }
      return _results;
    }
  }
};
